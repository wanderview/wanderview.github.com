<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[wanderview]]></title>
  <link href="http://localhost:4000/atom.xml" rel="self"/>
  <link href="http://localhost:4000/"/>
  <updated>2018-04-16T23:15:02-04:00</updated>
  <id>http://localhost:4000/</id>
  <author>
    <name><![CDATA[]]></name>
    <email><![CDATA[ben@wanderview.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  
  <entry>
    <title type="html"><![CDATA[Firefox 52 setTimeout() Changes]]></title>
    <link href="http://localhost:4000/blog/2017/03/13/firefox-52-settimeout-changes.html"/>
    <updated>2017-03-13T09:30:00-04:00</updated>
    <id>http://localhost:4000/blog/2017/03/13/firefox-52-settimeout-changes</id>
    <content type="html"><![CDATA[<p>Firefox 52 hit the release channel last week and it includes a few <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1300659">changes to
<code class="highlighter-rouge">setTimeout()</code> and <code class="highlighter-rouge">setInterval()</code></a>.  In particular, we have changed how we
schedule and execute timer callbacks in order to reduce the possibility of
jank.</p>

<!-- more -->

<p>To start, consider the following simple demo site (you may not want to run
it yourself):</p>

<p><a href="https://people-mozilla.org/~bkelly/timer-flood/index.html">Demo Site</a></p>

<p>When you click the “Start” button the site will begin flooding the browser
with <code class="highlighter-rouge">setTimeout()</code> calls.  Each callback will call <code class="highlighter-rouge">setTimeout()</code> twice.
This results in an exponential explosion of timers.  Clicking “Stop” will
cause the timers to stop calling <code class="highlighter-rouge">setTimeout()</code>.</p>

<p>The animated GIF is there so that you can visually see if any jank occurs.
(This is a great technique I am stealing from <a href="https://twitter.com/nolanlawson">Nolan Lawson</a>’s <a href="https://nolanlawson.com/2015/09/29/indexeddb-websql-localstorage-what-blocks-the-dom/">IDB
performance post</a>).</p>

<p>Traditionally, browsers will begin dropping frames when this sort of thing
happens and the GIF will stop animating.  For example, this video shows
Firefox 45 ESR running the demo:</p>

<video src="/videos/timer-flood-45esr.mp4" controls="" width="80%" class="center-block"></video>

<p>In Firefox 52, however, we have made changes which allows the browser to
mostly survive this use case.  This video shows that, while there is a
brief pause, the animated GIF continues to play fairly smoothly in spite
of the timer flood.</p>

<video src="/videos/timer-flood-52.mp4" controls="" width="80%" class="center-block"></video>

<h2 id="how-does-it-work">How Does It Work?</h2>

<p>Firefox achieves this by implementing <strong>yielding</strong> between timer callbacks.
After a timer callback is executed we allow any other non-timer event pending
in the queue to complete before running the next timer callback.</p>

<p>For example, consider the case where we have a number of timer callbacks that
want to run at the same time as a vsync refresh.  Its a bit of a race which
events will get to run first.  The refresh, however, is often considered more
important because if it’s delayed then the site’s frame-per-second will drop.</p>

<p>With this in mind, consider the “best” case and “worst” case for scheduling
the events:</p>

<p><img src="/images/event-queue-flood.svg" width="100%" class="center-block" /></p>

<p>In the best case the refresh runs first and is not delayed.  In the worst
case the refresh is delayed until all the timer callbacks have executed.  In
extreme cases, like the demo above, this delay can be quite long.</p>

<p>Yielding between timer callbacks changes the situation so that the worst case
looks like this instead:</p>

<p><img src="/images/event-queue-yielding-effect.svg" width="100%" class="center-block" /></p>

<p>Now, the refresh will be delayed by at most one timer callback.</p>

<p>In reality we don’t actually re-arrange events in the event queue.  Perhaps
a better way to think of it is that timers are stored in a separate queue.
Only a single timer is allowed to be scheduled on the main event queue at
any time.</p>

<p><img src="/images/event-queue-yielding-timer-queue.svg" width="100%" class="center-block" /></p>

<p>So after “callback 1” completes here “callback 2” will be placed on the
main event queue at the end.  This allows the refresh event to execute next.</p>

<h2 id="is-this-throttling">Is This Throttling?</h2>

<p>No.  Typically “timer throttling” means introducing some amount of delay
into each timer.  For example, if you call <code class="highlighter-rouge">setTimeout(func, 5)</code> in a
background tab most browsers will delay the timer callback for at least
one second.</p>

<p>Yielding is different in that it allows timers to run at <strong>full speed</strong> if
the main thread is idle.  Yielding only causes timers to be delayed if the
main thread is busy.  (Of course, if the main thread is busy then timers
have always run the risk of being delayed.)</p>

<p>That being said, if we detect that the timer queue is backing up we do
begin throttling timers.  This backpressure helps avoid exhausting memory
when a script is generating more <code class="highlighter-rouge">setTimeout()</code> calls than can be executed.
This back pressure is tuned to only trigger in extreme cases and most sites
should not experience it.</p>

<h2 id="is-this-prioritization">Is This Prioritization?</h2>

<p>Again, no.  Timer yielding is not quite the same as using a priority queue
and marking timer callbacks low priority.  In a strict prioritization scheme
it would be possible for low priority events to never run.  That is not the
case here.</p>

<p>In our timer yielding approach the next timer callback is run at the same
priority as all other events.  It may execute before other work.  It is
also guaranteed to be executed at some point.</p>

<h2 id="whats-the-catch">What’s The Catch?</h2>

<p>While our general approach is to yield between timers, our end solution
doesn’t actually do that.  We actually allow a limited number of timer
callbacks to run without yielding.  We do this to mitigate impact to
sites that use timers while saturating the main thread.</p>

<p>For example, consider a site that is:</p>

<ol>
  <li>Running an animation through a large number of timer callbacks.</li>
  <li>The animation is saturating the main thread with painting.</li>
</ol>

<p>In this case the timer callbacks will be throttled by the rate at which
the paints can happen.  When the browser cannot execute the paints at
60 FPS, then you will get at most one timer callback between each refresh
driver event.</p>

<p><img src="/images/event-queue-expensive-paint.svg" width="100%" class="center-block" /></p>

<p>This is not a problem for “closed loop” animations where you measure how long
things are taking to run and adjust your changes to match.  It can, however,
dramatically increase the overall animation time for “open loop” animations.</p>

<p>For example, consider this animation demonstration site:</p>

<p><a href="https://mozdevs.github.io/servo-experiments/experiments/tiles/">“Open Loop” Animation Demo</a></p>

<p>Here the site pre-computes all the animation steps and schedules a separate
<code class="highlighter-rouge">setTimeout()</code> for each one.  Each timer callback simply modifies the DOM
for its step without measuring to see if the animation is behind.</p>

<p>This demo site will cause pretty much every modern browser to drop to zero
frames-per-second.  The total animation, however, will run quite quickly.</p>

<video src="/videos/open-loop-animation-45.mp4" controls="" width="80%" class="center-block"></video>

<p>In Firefox 52, however, we end up delaying many of the timers due
to our yielding.  This keeps the browser running at 30fps, but the animation
takes much longer to complete:</p>

<video src="/videos/open-loop-animation-52.mp4" controls="" width="80%" class="center-block"></video>

<p>This is an extreme case that we don’t think reflects the typical behavior on
most sites.  There are many ways to implement this animation without scheduling
hundreds or thousands of simultaneous timers.  Its very likely that sites are
using these alternate methods to avoid triggering the poor FPS performance caused
by this technique.</p>

<p>That being said, we still want to avoid breaking existing sites if we can.  This
is why we are not enforcing a strict yield after every timer callback.  We hope
that by allowing a few timer callbacks to run without yielding we can mitigate
the impact to these kinds of workloads while still improving performance on
sites in general.</p>

<h2 id="whats-next">What’s Next?</h2>

<p>These <code class="highlighter-rouge">setTimeout()</code> changes have just hit our release channel with Firefox 52.
We will be on the look-out for any compatibility problems in the wild.  So
far we have only had a <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1342854">single bug report</a> in the four months since this
landed in nightly.</p>

<p>If you believe you have a problem on your site in Firefox due to these changes
please <a href="https://bugzilla.mozilla.org/enter_bug.cgi?format=guided#h=dupes|Core|DOM">file a bug</a> and <a href="https://bugzilla.mozilla.org/user_profile?login=bkelly%40mozilla.com">add me to the CC list</a>.</p>

<p>Barring large-scale problems we plan to continue refining this approach.  We will
likely change our limit on “timers allowed before yielding” to use a
time budget approach instead of a fixed number.  In addition, the <a href="https://billmccloskey.wordpress.com/2016/10/27/mozillas-quantum-project/">Quantum DOM</a>
project will be experimenting with more changes to event queue scheduling in
general.</p>

<h2 id="update-3302018">Update (3/30/2018)</h2>

<p>NOTE: We implemented a time budget approach to yielding in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1343912">Firefox 55</a>.  By
default Firefox will now execute consecutive timers for up to 4ms before forcing
a yield.</p>

]]></content>
  </entry>
  
  
  
  <entry>
    <title type="html"><![CDATA[Patching Resources in Service Workers]]></title>
    <link href="http://localhost:4000/blog/2015/10/13/patching-resources-in-service-workers.html"/>
    <updated>2015-10-13T10:30:00-04:00</updated>
    <id>http://localhost:4000/blog/2015/10/13/patching-resources-in-service-workers</id>
    <content type="html"><![CDATA[<p>Consider a web site that uses a service worker to provide offline access.  It
consists of numerous resources stored in a versioned Cache.</p>

<p>What does this site need to do when its code changes?</p>

<!-- more -->

<p>It clearly needs to update its cache.  Thanks to the service worker life cycle,
this is relatively straightforward.  As described in <a href="https://twitter.com/jaffathecake">Jake Archibald</a>’s
<a href="https://jakearchibald.com/2014/offline-cookbook/#on-install-as-a-dependency">Offline Cookbook</a>, the site simply needs to <code class="highlighter-rouge">cache.addAll()</code> the new resource
in the install event and <code class="highlighter-rouge">caches.delete()</code> the old Cache in the activate event:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>self.addEventListener('install', function(evt) {
  evt.waitUntil(
    caches.open('v2').then(function(cache) {
      return cache.addAll(resourceList);
    })
  );
});

self.addEventListener('activate', function(evt) {
  evt.waitUntil(caches.delete('v1'));
});
</code></pre></div></div>

<p>This is nice and simple, but it does have one downside.  It requests the
entire resource list from the browser’s network stack on each upgrade.</p>

<p>This can be mitigated pretty easily For unchanged files.  Simply set the correct
cache control headers on the server so you hit the HTTP cache.  Or even copy the
resource directly from the old <code class="highlighter-rouge">v1</code> cache to the new <code class="highlighter-rouge">v2</code> cache.</p>

<p>That being said, we normally only update when things change.  Is there anything
we can do to improve the situation for modified resources?</p>

<h2 id="can-we-do-better">Can we do better?</h2>

<p>Consider this <a href="/delta-cache/">demo site</a> (<a href="https://github.com/wanderview/delta-cache">source code</a>).  Open it with your devtools network panel visible.
It should work in both Firefox and Chrome release channels.  (There is an <a href="https://code.google.com/p/chromium/issues/detail?id=542668">issue</a>
with Chrome on windows, though.)</p>

<p><img class="center-block" src="/images/upgrades-initial.png" width="800" /></p>

<p>The buttons let you simulate upgrading a cache as the service worker would.  Each
version of the cache stores two resources; JQuery and Bootstrap.  The contents of
each resource is shown in a separate div so you can inspect the final loaded
resource.</p>

<p>So, to model the typical upgrade process you would click:</p>

<ul>
  <li>Load v1 Resources</li>
  <li>Clear All Resources</li>
  <li>Load v2 Resources</li>
  <li>Clear All REsources</li>
  <li>Load v3 Resources</li>
</ul>

<p>This creates the following network traffic.</p>

<p><img class="center-block" src="/images/upgrades-no-delta.png" width="800" /></p>

<p>However, if you click the load buttons in sequence without clearing, then we
can see an optimization at work.  So:</p>

<ul>
  <li>Load v1 Resources</li>
  <li>Load v2 Resources</li>
  <li>Load v3 Resources</li>
</ul>

<p>Which gives us:</p>

<p><img class="center-block" src="/images/upgrades-with-delta.png" width="800" /></p>

<p>In this case the v2 and v3 network traffic has been reduced by a factor of ten.</p>

<h2 id="what-is-going-on-here">What is going on here?</h2>

<p>The demo site is using an optimization called <a href="https://en.wikipedia.org/wiki/Delta_encoding">delta encoding</a> to request
only the changes in each resource.  In this (admittedly contrived) case, both
JQuery and Bootstrap are only being updated across minor versions, so the
changes are quite small.</p>

<p>While the demo is using relatively small updates, delta encoding is still
useful for larger changes.  For example, sending the gzip’ed differences between
JQuery 1.11.3 and 2.1.4 still only requires 8.6KB.</p>

<p>Of course, delta encoding is not a new concept.  We use it every day with
git and other tools.  It was even proposed as an HTTP standard in 2002 in
<a href="https://tools.ietf.org/html/rfc3229">RFC 3229</a>.  It never caught on, however, because it requires extensive
server resources to implement in a general way.  For example, see this
article on the <a href="https://blog.cloudflare.com/efficiently-compressing-dynamically-generated-53805/">CloudFlare blog</a>.</p>

<p>The nice thing about service workers is they let us implement this algorithm
in a site-specific way that is tailored to our use case.  We determine where
it makes sense to use delta encoding and skip it for resources where its
not feasible.  This lets us use the optimization without dealing with the
complications of making it general purpose across all web sites.</p>

<h2 id="diffing-and-patching">Diff’ing and Patching</h2>

<p>When I first considered delta encoding, I searched for a good diff/patch
algorithm implemented in javascript.  At the time I didn’t find much that
was suitable.  It seemed most libraries were either focused on creating
traditional UNIX diff output or wrappers around native code.  I needed
a patching algorithm solely implemented in javascript, however.</p>

<p>In order for delta encoding to be useful the patching algorithm in the
browser must be small.  We can’t just use emscripten to compile a C
patch program, because the size of the resulting library would dwarf any
advantage gained from the delta encoding.</p>

<p>(It occurrs to me now that the projects like <a href="https://github.com/creationix/js-git">js-git</a> might have patching
code I could have borrowed, but I didn’t think of it at the time.)</p>

<p>In the end I adapted <a href="https://twitter.com/cperciva">Colin Percival</a>’s excellent set of <a href="http://www.daemonology.net/bsdiff/">bsdiff</a> tools.</p>

<p>At first glance, bsdiff seemed like a good fit.  Its an extremely effective
diffing tool that works well on both text and binary resources.  Whats more,
bspatch is a single small C file that I could transcribe to javascript.</p>

<p>Then I ran into bzip.  It turns out bsdiff works by creating file segments
slightly larger than the original file, but with a large number of zeros
for unchanged content.  It then internally uses bzip to compress these
segments.  The result is a compact difference file.</p>

<p>Porting bzip seemed like a daunting task and likely to require a large
library.</p>

<p>It occurred to me, however, the browser already knows how to decompress gzip
natively.  Could we instead strip the internal bzip compression out and
just serve the resulting files with gzip encoding?</p>

<p>The answer is yes.  The demo site uses exactly this technique.</p>

<p>In fact, if you look closely at the delta encoding network traffic, you will
see devtools reports the resulting uncompressed file as being slightly
larger than the original resource.  This is bsdiff’s internal segment
algorithm at work.</p>

<p>The u(ncompressed) bsdiff code is on github as <a href="https://github.com/wanderview/ubsdiff">ubsdiff</a>.  In addition, I’ve
published <a href="https://www.npmjs.com/package/ubspatch">ubspatch</a> as a separate npm module.  Currently the ubsdiff
code is only available in C, but it could also be ported to javascript.</p>

<h2 id="should-i-use-this-in-production">Should I Use This in Production</h2>

<p>Probably not with this specific code.  I wrote a lot of it while my kids were
throwing legos at my head.</p>

<p>The technique, however, seems suitable for service worker updates using
the install event.  The install event runs in parallel with any currently
active service worker, so you will not create problems for the current page.</p>

<p>For read-through-caching, though, its less clear.  In these cases you
will often need to patch the resource on-demand in a fetch event handler.
This is problematic because the patching can take a non-trivial amount of time.
Since its not streaming yet, it will just block the worker event loop while it
runs.  If there are additional fetch events waiting to be serviced, this will
cause network jank.</p>

<p>Ideally, service workers would allow heavy workloads like patching to be
offloaded via a worker.  The spec really needs to be extended to allow workers
to be accessed within the service worker.</p>

<p>(You could bounce a <code class="highlighter-rouge">postMessage()</code> through the fetch event source document to
a worker that does the patching and then back, but that seems a bit convoluted
to really recommend.)</p>

<h2 id="frameworks-and-tools">Frameworks and Tools</h2>

<p>Ultimately I think this technique probably needs client-side frameworks
and server-side tooling to really shine.</p>

<p>A framework could transparently handle a number of things:</p>

<ul>
  <li>Automatically include currently cached resource versions in outgoing requests.</li>
  <li>Dynamically determine if using delta encoding makes sense for any given
resource.</li>
  <li>Automatically patch differences returned from the server.</li>
  <li>Provide integrity checks on the final resource after patching.  This is a
crucial step for any production system, but not something I included in the
prototype here.</li>
</ul>

<h2 id="service-workers-are-delightful">Service Workers Are Delightful</h2>

<p>At the end of the day, though, I find service workers exciting because
they let web developers implement features that had previously been the
sole domain of the browser.  The browsers are old, creaky, and have lots
of constraints.  Web sites can break free of these constraints by using
service workers.</p>

]]></content>
  </entry>
  
  
  
  <entry>
    <title type="html"><![CDATA[Service Worker Meeting Highlights]]></title>
    <link href="http://localhost:4000/blog/2015/07/28/service-worker-meeting-highlights.html"/>
    <updated>2015-07-28T16:30:00-04:00</updated>
    <id>http://localhost:4000/blog/2015/07/28/service-worker-meeting-highlights</id>
    <content type="html"><![CDATA[<p><img class="pull-right" src="/images/highlighter-small.jpg" /></p>

<p>Last week folks from Apple, Google, Microsoft, Mozilla, and Samsung met in San Francisco
to talk about service workers.  The focus was on addressing problems with the
current spec and to discuss what new features should be added next.</p>

<!-- more -->

<p>The <a href="https://docs.google.com/document/d/1X5KvUxLjXS2kIWheYUzj6GOgwP2eGHj1cAuau-cn8sE/edit?usp=sharing">minutes</a> for the meeting are online.  We covered a lot of ground, though,
and these notes are thirty pages long.  It seems many people will simply throw them
in the “tl;dr” bucket and move on.</p>

<p>The goal of this post is to try to distill the meeting into a few highlights that
are a bit more readable and still reflect what we accomplished.</p>

<p>The group came to agreement (more or less) on these items:</p>

<ul>
  <li><a href="#other-specs">Integrating Fetch Event with Other Specs</a></li>
  <li><a href="#foreign-fetch">Fall-through or Foreign Fetch</a></li>
  <li><a href="#no-fetch">No-fetch Optimization</a></li>
  <li><a href="#updates">Coordinated Updates</a></li>
  <li><a href="#max-age">Service-Worker-Max-Age Header</a></li>
  <li><a href="#meetings">Meeting Planning</a></li>
</ul>

<p>This list mainly focuses on the decisions that came out of the top level agenda
items.  There were many other discussions that did not resolve to any immediate
decision.  In addition, a lot of good work was done addressing many of the open
<a href="https://github.com/slightlyoff/ServiceWorker/issues?q=is%3Aopen+is%3Aissue+milestone%3A%22Version+1%22">v1 issues</a>.  Please see the <a href="https://docs.google.com/document/d/1X5KvUxLjXS2kIWheYUzj6GOgwP2eGHj1cAuau-cn8sE/edit?usp=sharing">minutes</a> if you want to delve into these
topics.</p>

<p><a name="other-specs"></a></p>
<h2 id="integrating-fetch-event-with-other-specs">Integrating Fetch Event with Other Specs</h2>

<p>The group decided to investigate and document how the fetch spec should be
integrated into pre-existing specs.</p>

<hr />

<p>Currently service workers are defined in two specs:</p>

<ul>
  <li>The <a href="https://slightlyoff.github.io/ServiceWorker/spec/service_worker/index.html">service worker spec</a> defines how to register and message the worker
objects.  It also defines the life cycle of service workers.</li>
  <li>The <a href="https://fetch.spec.whatwg.org/">fetch spec</a> defines how network requests are performed.  At a particular
point in these steps it calls out to the service worker spec to perform
fetch event network interception.</li>
</ul>

<p>Unfortunately, the majority of the other pre-existing specs do not currently use
the fetch spec to perform network requests.  Instead they use their own algorithm
or no specific algorithm at all.</p>

<p>This is a problem because many of the security checks in the fetch spec require
that attributes are set properly on the request.  Each spec must set the
appropriate Request context and mode.</p>

<p>In addition, its unclear if certain specs should not intercept at all.  For
example, it seems appcache requests should never produce service worker fetch
events, but what about things like CSP violation reports?</p>

<p>These questions are not currently answered by the available specs.</p>

<p>At the meeting last week, however, Google’s <a href="https://twitter.com/FalkenMatto">Matt Falkenhagen</a> offered to help
us at least determine what Chrome currently ships.  We plan to examine each
network request call site to methodically determine the correct behavior and
attributes.  We will then document the result in the fetch spec until it
can be properly moved integrated into the other specs.</p>

<p>This is great news for Mozilla because the potential security holes here
are the main reason we chose <a href="/blog/2015/06/18/service-workers-will-not-ship-in-firefox-41/">not to ship in Firefox 41</a>.</p>

<p><a name="foreign-fetch"></a></p>
<h2 id="fall-through-or-foreign-fetch">Fall-through or Foreign Fetch</h2>

<p>The group decided to pursue a fetch oriented design for communicating with
cross-origin service workers.</p>

<hr />

<p>For a while now Google has been working on an addition to the spec to allow
service workers for different origins to communicate with one another.  This
would support use cases such as:</p>

<ul>
  <li>Offline analytics</li>
  <li>Cloud storage APIs</li>
  <li>Efficiently sharing fonts</li>
</ul>

<p>The solution was originally envisioned as an RPC-like API called
<a href="https://github.com/mkruisselbrink/navigator-connect">navigator.connect()</a>.</p>

<p>Over time, however, the effort migrated to a system based on FetchEvent.  The
idea is to permit a service worker to intercept fetch events to its own origin.
So, for example, Google could register a service worker that receives fetch
events for analytics.js and instantly returns the script from the offline Cache.</p>

<p>In general, we prefer this fetch event based system better for a number of
reasons:</p>

<ol>
  <li>Its more “webby” using HTTP requests instead of RPC-like messags.</li>
  <li>As a consequence its easy to provide offline support for REST APIs build on
top of HTTP verbs like GET and POST.</li>
  <li>Its progressive.  If a browser does not support this new system, then the
requests simply go to the server as they used to.</li>
</ol>

<p>While there is general agreement with the direction, we still need to work out
the details.  Google has proposed <a href="https://github.com/slightlyoff/ServiceWorker/issues/684">fall-through fetch</a>, while Mozilla has
proposed <a href="https://wiki.whatwg.org/wiki/Foreign_Fetch">foreign fetch</a>.  They are very similar, however, and we don’t
currently anticipate any difficult issues.</p>

<p><a name="no-fetch"></a></p>
<h2 id="no-fetch-optimization">No-fetch Optimization</h2>

<p>The group decided to provide an API during the install event to explicitly
<a href="https://github.com/slightlyoff/ServiceWorker/issues/718#issuecomment-123530545">opt-out of fetch events</a> for a particular service worker.</p>

<hr />

<p>Currently the registration API assumes that a service worker is going to be
handling fetch events.  You must provide a scope to identify the service
worker.  If a network request matches that scope, then you are going to get
a fetch event.  If you don’t actually intend to handle the event, this adds
needless delay to network requests.</p>

<p>Many options were discussed, but the final solution we settled on is to
provide <code class="highlighter-rouge">disableFetch()</code> and <code class="highlighter-rouge">enableFetch()</code> methods on the install event.</p>

<p><a name="updates"></a></p>
<h2 id="coordinated-updates">Coordinated Updates</h2>

<p>The group decided that we need to support <a href="https://github.com/slightlyoff/ServiceWorker/issues/727">coordinated updates</a> for
sites with multiple service workers.</p>

<hr />

<p>Currently its difficult to use multiple service workers for the same site.
When you update their code, one will always update before the other one
creating the potential for bugs.</p>

<p>We need to spec an extension to the API to allow multiple service workers
to update together coherently.</p>

<p><a name="max-age"></a></p>
<h2 id="service-worker-max-age-header">Service-Worker-Max-Age Header</h2>

<p>The group decided to support the <a href="https://github.com/slightlyoff/ServiceWorker/issues/721">Service-Worker-Max-Age header</a>.</p>

<hr />

<p>Currently the update algorithm only examines the top level service worker
script to determine if there is a new version.  Code within imported scripts
is not examined.  This can make it awkward to trigger service worker updates
when one of these dependent scripts has changed.</p>

<p>The <a href="https://github.com/slightlyoff/ServiceWorker/issues/721">Service-Worker-Max-Age header</a> provides a way to opt-out of this
behavior by setting a maximum time to run any single version of the service
worker.</p>

<p><a name="meetings"></a></p>
<h2 id="meeting-planning">Meeting Planning</h2>

<p>Finally, the group decided to have more frequent face-to-face meetings.  The
next one will be held at <a href="http://www.w3.org/2015/10/TPAC/">TPAC</a> at the end of October.</p>

<hr />

<p><small><a href="https://www.flickr.com/photos/42931449@N07/5418401602">Highlighter image</a> courtesy of <a href="https://www.flickr.com/photos/42931449@N07/">photosteve101</a>.</small></p>

]]></content>
  </entry>
  
  
  
  <entry>
    <title type="html"><![CDATA[Service Workers Will Not Ship in Firefox 41]]></title>
    <link href="http://localhost:4000/blog/2015/06/18/service-workers-will-not-ship-in-firefox-41.html"/>
    <updated>2015-06-18T11:15:00-04:00</updated>
    <id>http://localhost:4000/blog/2015/06/18/service-workers-will-not-ship-in-firefox-41</id>
    <content type="html"><![CDATA[<p>In <a href="/blog/2015/03/24/service-workers-in-firefox-nightly">my last post</a> I tried to estimate when Service Workers would ship in
Firefox.  I was pretty sure it would not make it in 40, but thought 41 was a
possibility.  It’s a few months later and things are looking clearer.</p>

<p>Unfortunately, Service Workers will not ship in Firefox 41.</p>

<!-- more -->

<p>While Service Workers are largely feature complete, we’ve had issues with the
network interception code.  It’s become clear that implementing this feature
has introduced a number of security risks.  We need to perform a fresh security
audit before the code can ship.</p>

<p>This was a difficult decision to make, but we feel it was the right one
given the security implications.</p>

<p>That being said, it’s still possible we will ship parts of the Service Worker
spec in Firefox 41:</p>

<ul>
  <li>
    <p>Specifically, push notifications are very close and may make it into the
release.  If this occurs we will add a preference to disable fetch event
while exposing the rest of the Service Worker API.  This will allow push-based
Service Workers while the network interception goes through its security audit.</p>
  </li>
  <li>
    <p>In addition, it seems likely that the Cache API will ship in Firefox 41.  While
this feature is not as useful without the fetch event, it’s a large piece needed
to support offline web pages.  Getting it released moves us that much closer to
full offline support and will let us focus more people on polishing network
interception.</p>
  </li>
</ul>

<p>As always, we appreciate your support and patience.  Please don’t hesitate to
contact us if you encounter any problems.</p>

]]></content>
  </entry>
  
  
  
  <entry>
    <title type="html"><![CDATA[Service Workers in Firefox Nightly]]></title>
    <link href="http://localhost:4000/blog/2015/03/24/service-workers-in-firefox-nightly.html"/>
    <updated>2015-03-24T11:15:00-04:00</updated>
    <id>http://localhost:4000/blog/2015/03/24/service-workers-in-firefox-nightly</id>
    <content type="html"><![CDATA[<p><img class="pull-right" src="/images/nightly-logo-small.png" width="200" /></p>

<p>I’m pleased to announce that we now recommend normal Nightly builds for testing
our implementation of Service Workers.  We will not be posting any more custom
builds here.</p>

<!-- more -->

<p>Now that <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1110814">bug 1110814</a> has landed in mozilla-central, Nightly has roughly the
same functionality as the last sw-build.  Just enable these preferences in
about:config:</p>

<ul>
  <li>Set <code class="highlighter-rouge">dom.caches.enabled</code> to true.</li>
  <li>Set <code class="highlighter-rouge">dom.serviceWorkers.enabled</code> to true.</li>
</ul>

<p>Please note that on Firefox OS you must enable an additional preference as well.
See <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1125961#c35">bug 1125961</a> for details.</p>

<p>In addition, we’ve decided to move forward with enabling the Service Worker and
Cache API preferences by default in non-releases builds.  We expect the Cache
preference to be enabled in the tree today.  The Service Worker preference should
be enabled within the next week once <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=931249">bug 931249</a> is complete.</p>

<p>When Nightly merges to Aurora (Developer Edition), these preferences will also be
enabled by default there.  They will not, however, ride the trains to Beta or
Release yet.  We feel we need more time stabilizing the implementation before that
can occur.</p>

<p>So, unfortunately, I cannot tell you exactly which Firefox Release will ship with
Service Workers yet.  It will definitely not be Firefox 39.  Its possible Service
Workers will ship in Firefox 40, but its more likely to finally be enabled in
Firefox 41.</p>

<p>Developer Edition 39, however, will have Cache enabled and will likely also have
Service Workers enabled.</p>

<p>Finally, while the code is stabilizing you may see Service Worker registrations
and Cache data be deleted when you update the browser.  If we find that the data
format on disk needs to change we will simply be reseting the relevant storage
area in your profile.  Once the decision to ship is made any future changes will
then properly migrate data without any loss.  Again, this only effects Service
Worker registrations and data stored in Cache.</p>

<p>As always we appreciate your help testing, reporting bugs, and implementing code.</p>

]]></content>
  </entry>
  
  
  
  <entry>
    <title type="html"><![CDATA[Initial Cache API Lands in Nightly]]></title>
    <link href="http://localhost:4000/blog/2015/03/09/initial-cache-api-lands-in-nightly.html"/>
    <updated>2015-03-09T11:30:00-04:00</updated>
    <id>http://localhost:4000/blog/2015/03/09/initial-cache-api-lands-in-nightly</id>
    <content type="html"><![CDATA[<p>Its been two busy weeks since the last Service Worker build and a lot has
happened.  The first version of the Cache API has landed in Nightly along
with many other improvements and fixes.</p>

<!-- more -->

<p>The Cache landing is nice because it was the largest set of patches blocking
users from testing directly in Nightly.  Finally getting it into the tree brings
us much closer to the point where we don’t need these custom builds any more.</p>

<p>We’re not there yet, though.  The custom builds will still be needed until
the following two issues are fixed:</p>

<ul>
  <li>Cache.put() current does not work.  In order to fix this we must integrate
Cache with the CrossProcessPipe.  These patches have been in the custom builds
from the start, but we must complete the work in order for most Service Worker
sites to be usable on Nightly. | <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1110814">bug 1110814</a></li>
  <li>Service Worker scripts and their dependencies are not currently saved for
offline access.  Obviously, we must fix this in order for Service Workers
to provide true offline support.  This feature is in progress, but unfortunately
is not in the custom build yet. | <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=931249">bug 931249</a></li>
</ul>

<p>Once these two bugs are fixed we will begin encouraging the community to test
with Nightly directly.</p>

<p>This week’s build was updated as of yesterday, March 8:</p>

<p><a href="/sw-builds">Firefox Service Worker Builds</a></p>

<p>This build includes the following feature changes in Nightly:</p>

<ul>
  <li>
    <table>
      <tbody>
        <tr>
          <td>Cache API</td>
          <td><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=940273">bug 940273</a></td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>FetchDriver channel stalls when Service Worker returns from fetch event too
early | <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1130803">bug 1130803</a></li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>remove Service Worker Cache “prefixMatch” option</td>
          <td><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1130452">bug 1130452</a></td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>ServiceWorkerGlobalScope.close() should throw InvalidAccessError |
<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1131353">bug 1131353</a></li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>ServiceWorkerClients API spec changes</td>
          <td><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1058311">bug 1058311</a></td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>Remove ServiceWorkerGlobalScope.scope</td>
          <td><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1132673">bug 1132673</a></td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>ServiceWorker: client.postMessage should be dispatched to
navigator.serviceWorker.onmessage | <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1136467">bug 1136467</a></li>
</ul>

<p>It also includes these bug fixes:</p>

<ul>
  <li>navigator.serviceWorker.controller does not track underlying state |
<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1131882">bug 1131882</a></li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>Fix registration persistence in some activation cases</td>
          <td><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1131874">bug 1131874</a></td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>Don’t persist registrations that fail</td>
          <td><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1132141">bug 1132141</a></td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>FetchDriver should check content load policy before proceeding |
<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1139665">bug 1139665</a></li>
  <li>Use correct principal for channel which updates ServiceWorker |
<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1137419">bug 1137419</a></li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>Seg Fault when calling cache.matchAll without parameters</td>
          <td><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1138916">bug 1138916</a></td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>Crash in ActorChild::SetFeature</td>
          <td><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1140065">bug 1140065</a></td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>Fix -Winconsistent-missing-override warnings introduced in Cache API |
<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1139603">bug 1139603</a></li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>disallow creating nested workers from ServiceWorker</td>
          <td><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1137398">bug 1137398</a></td>
        </tr>
      </tbody>
    </table>
  </li>
</ul>

<p>Finally, a number of testing changes were made:</p>

<ul>
  <li>Replace getServiced() with matchAll() in a couple of ServiceWorker tests |
<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1137477">bug 1137477</a></li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>Various ServiceWorker test fixes</td>
          <td><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1139561">bug 1139561</a></td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>Remove activatingWorker warning in ServiceWorkerManager</td>
          <td><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1139990">bug 1139990</a></td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>Remove a couple of unused test functions on ServiceWorkerContainer |
<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1140120">bug 1140120</a></li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>nice to have a test-interfaces.html for ServiceWorkers</td>
          <td><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1137816">bug 1137816</a></td>
        </tr>
      </tbody>
    </table>
  </li>
</ul>

<p>Many thanks to all the contributors:</p>

<ul>
  <li><a href="https://twitter.com/baku82845977">Andrea Marchesini</a></li>
  <li><a href="https://plus.google.com/+CatalinBadea/about">Catalin Badea</a></li>
  <li><a href="https://twitter.com/CodingExon">Daniel Holbert</a></li>
  <li><a href="https://twitter.com/ehsanakhgari">Ehsan Akhgari</a></li>
  <li><a href="https://twitter.com/Gioyik">Giovanny Gongora</a></li>
  <li><a href="http://www.janbambas.cz/">Honza Bambas</a></li>
  <li>Jason Gersztyn</li>
  <li><a href="https://twitter.com/lastontheboat">Josh Mathews</a></li>
  <li><a href="https://twitter.com/nikhilcutshort">Nikhil Marathe</a></li>
</ul>

<p>Please let us know if you find any new issues.  Thank you!</p>

]]></content>
  </entry>
  
  
  
  <entry>
    <title type="html"><![CDATA[That Event Is So Fetch]]></title>
    <link href="http://localhost:4000/blog/2015/02/23/that-event-is-so-fetch.html"/>
    <updated>2015-02-23T10:00:00-05:00</updated>
    <id>http://localhost:4000/blog/2015/02/23/that-event-is-so-fetch</id>
    <content type="html"><![CDATA[<p>The Service Workers builds have been updated as of yesterday, February 22:</p>

<p><a href="/sw-builds">Firefox Service Worker Builds</a></p>

<!-- more -->

<p>Notable contributions this week were:</p>

<ul>
  <li><a href="https://twitter.com/lastontheboat">Josh Mathews</a> landed Fetch Event support in Nightly.  This is important,
of course, because without the Fetch Event you cannot actually intercept
any network requests with your Service Worker. | <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1065216">bug 1065216</a></li>
  <li><a href="https://plus.google.com/+CatalinBadea/about">Catalin Badea</a> landed more of the Service Worker API in Nightly, including
the ability to communicate with the Service Worker using <code class="highlighter-rouge">postMessage()</code>. |
<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=982726">bug 982726</a></li>
  <li><a href="https://twitter.com/nikhilcutshort">Nikhil Marathe</a> landed some more of his spec implementations to handle
unloading documents correctly and to treat activations atomically. |
<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1041340">bug 1041340</a> | <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1130065">bug 1130065</a></li>
  <li><a href="https://twitter.com/baku82845977">Andrea Marchesini</a> landed fixes for FirefoxOS discovered by the team in
Paris. | <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1133242">bug 1133242</a></li>
  <li><a href="https://github.com/jaoo">Jose Antonio Olivera Ortega</a> contributed a work-in-progress patch to force
Service Worker scripts to update when <code class="highlighter-rouge">dom.serviceWorkers.test.enabled</code> is
set. | <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1134329">bug 1134329</a></li>
  <li>I landed my implementation of the Fetch Request and Response <code class="highlighter-rouge">clone()</code>
methods. | <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1073231">bug 1073231</a></li>
</ul>

<p>As always, please let us know if you run into any problems.  Thank you for
testing!</p>

]]></content>
  </entry>
  
  
  
  <entry>
    <title type="html"><![CDATA[A Very Special Valentines Day Build]]></title>
    <link href="http://localhost:4000/blog/2015/02/14/a-very-special-valentines-day-build.html"/>
    <updated>2015-02-14T14:26:52-05:00</updated>
    <id>http://localhost:4000/blog/2015/02/14/a-very-special-valentines-day-build</id>
    <content type="html"><![CDATA[<p><img class="pull-right" src="/images/sw-candy-heart.jpg" /></p>

<p>Last week we <a href="/blog/2015/02/10/introducing-firefox-service-worker-builds/">introduced some custom Firefox builds</a> that include our
work-in-progress on Service Workers.  The goal of these builds is to enable
wider testing of our implementation as it continues to progress.</p>

<p>These builds have been updated today, February 14:</p>

<p><a href="/sw-builds">Firefox Service Worker Builds</a></p>

<!-- more -->

<p>This week’s build provides a number of improvements:</p>

<ul>
  <li><a href="https://twitter.com/baku82845977">Andrea Marchesini</a> landed <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=984050">bug 984050</a> in Nightly implementing
peristent Service Worker registrations.  Previously registrations would
be forgotten once the browser was closed.  Obviously, persistent
registrations is a key feature necessary to implement offline web apps
with Service Workers.</li>
  <li><a href="https://twitter.com/nikhilcutshort">Nikhil Marathe</a> has a patch in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1130065">bug 1130065</a> that fixes some of the
trickier aspects of activating a Service Worker for a document.</li>
  <li>The Paris team has also been investigating using Service Workers on
FirefoxOS.  With Andrea’s help this work is being moved into the tree and
is also included in this build.</li>
  <li>As a result, this build now includes a FirefoxOS build for the Flame device
based on the v18D firmware.</li>
</ul>

<p>Also, some patches that were included in last week’s build have landed in the
tree for Nightly:</p>

<ul>
  <li>As mentioned above, persistent registrations landed in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=984050">bug 984050</a>.</li>
  <li>Improvements to gecko’s stream infrastructure to support cloning also landed
in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1100398">bug 1100398</a>.</li>
</ul>

<p>As always, please let us know if you have any questions or run into any
problems.  Thank you for your assistance in testing this new feature!</p>

]]></content>
  </entry>
  
  
  
  <entry>
    <title type="html"><![CDATA[Introducing Firefox Service Worker Builds]]></title>
    <link href="http://localhost:4000/blog/2015/02/10/introducing-firefox-service-worker-builds.html"/>
    <updated>2015-02-10T14:00:00-05:00</updated>
    <id>http://localhost:4000/blog/2015/02/10/introducing-firefox-service-worker-builds</id>
    <content type="html"><![CDATA[<p>About <a href="/blog/2014/12/08/implementing-the-serviceworker-cache-api-in-gecko/">two months ago I wrote</a> that the Service Worker Cache code was entering
code review.  Our thought at the time was to quickly transition all of the
work that had been done on the maple project branch back into Nightly.  The
project branch wasn’t really needed any more and the code could more easily be
tested by the community on Nightly.</p>

<p>Fast forward to today and, unfortunately, we are still working to make this
transition.  Much of the code from maple is still in review.  Meanwhile, the project
branch has languished and is not particularly useful any more.  Obviously, this
is a bad situation as it has made testing Service Workers with Firefox nearly
impossible.</p>

<p>To address this we are going to begin posting periodic builds of Nightly with
the relevant Service Worker code included.  These builds can be found here:</p>

<p><a href="/sw-builds">Firefox Service Worker Builds</a></p>

<!-- more -->

<p>This page will be updated as code changes or migrates into Nightly.</p>

<p>We are all very excited to see Service Workers adopted on the web and are
actively working to have it enabled in Firefox Nightly by the end of
March.  We hope that these builds will allow wider testing of our implementation
to help us reach that goal.</p>

<p>Thank you for your patience and understanding as we work through the issues
to get this feature landed and enabled in Nightly.</p>

]]></content>
  </entry>
  
  
  
  <entry>
    <title type="html"><![CDATA[Implementing the Service Worker Cache API in Gecko]]></title>
    <link href="http://localhost:4000/blog/2014/12/08/implementing-the-serviceworker-cache-api-in-gecko.html"/>
    <updated>2014-12-08T00:43:00-05:00</updated>
    <id>http://localhost:4000/blog/2014/12/08/implementing-the-serviceworker-cache-api-in-gecko</id>
    <content type="html"><![CDATA[<p>For the last few months I’ve been heads down, implementing the Service Worker
Cache API in gecko.  All the work to this point has been done on a <a href="https://hg.mozilla.org/projects/maple/file/tip/dom/cache">project
branch</a>, but the code is finally reaching a point where it can land in
mozilla-central.  Before this can happen, of course, it needs to be peer
reviewed.  Unfortunately this patch is going to be large and complex.  To
ease the pain for the reviewer I thought it would be helpful to provide a
high-level description of how things are put together.</p>

<!--more-->

<p>If you are unfamiliar with Service Workers and its Cache API, I highly recommend
reading the following excellent sources:</p>

<ul>
  <li><a href="http://jakearchibald.com/2014/offline-cookbook/">The Offline Cookbook</a> by <a href="https://twitter.com/jaffathecake">Jake Archibald</a></li>
  <li><a href="http://www.html5rocks.com/en/tutorials/service-worker/introduction/">Introduction to Service Worker</a> by <a href="https://twitter.com/gauntface">Matt Gaunt</a></li>
  <li><a href="https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker_API/Using_Service_Workers">Using Service Workers</a> on MDN</li>
  <li><a href="https://slightlyoff.github.io/ServiceWorker/spec/service_worker/index.html">Service Worker Spec</a></li>
  <li><a href="https://fetch.spec.whatwg.org/">Fetch Spec</a></li>
</ul>

<h1 id="building-blocks">Building Blocks</h1>
<p>The Cache API is implemented in C++ based on the following Gecko primitives:</p>

<ul>
  <li>
    <p><strong>WebIDL DOM Binding</strong></p>

    <p>All new DOM objects in gecko now use our new <a href="https://developer.mozilla.org/en-US/docs/Mozilla/WebIDL_bindings">WebIDL bindings</a>.</p>
  </li>
  <li>
    <p><strong>PBackground IPC</strong></p>

    <p><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=956218">PBackground</a> is an IPC facility that connects a child actor to a parent
  actor.  The parent actor is always in the parent process.  PBackground,
  however, allows the child actor to exist in either a remote child content
  process or within the same parent process.  This allows us to build
  services that support both <a href="https://wiki.mozilla.org/Electrolysis">electrolysis</a> (e10s) and our more traditional
  single process model.</p>

    <p>Another advantage of PBackground is that the IPC calls are handled by a
  worker thread rather than the parent process main thread.  This helps
  avoid stalls due to other main thread work.</p>
  </li>
  <li>
    <p><strong>Quota Manager</strong></p>

    <p><a href="http://dxr.mozilla.org/mozilla-central/source/dom/quota/QuotaManager.h">Quota Manager</a> is responsible for managing the disk space used by web
  content.  It determines when quota limits have been reached and will
  automatically delete old data when necessary.</p>
  </li>
  <li>
    <p><strong>SQLite</strong></p>

    <p><a href="https://developer.mozilla.org/en-US/docs/Storage">mozStorage</a> is an API that provides access to an SQLite database.</p>
  </li>
  <li>
    <p><strong>File System</strong></p>

    <p>Finally, the Cache uses raw files in the file system.</p>
  </li>
</ul>

<h1 id="alternatives">Alternatives</h1>
<p>We did consider a couple alternatives to implementing a new storage engine for
Cache.  Mainly, we thought about using the existing <strong>HTTP cache</strong> or building
on top of <strong>IndexedDB</strong>.  For various reasons, however, we chose to build
something new using these primitives instead.  Ultimately it came down to the
Cache spec not quite lining up with these solutions.</p>

<p>For example, the HTTP cache has an optimization where it only stores a single
response for a given URL. In contrast, the Cache API spec requires that multiple
Responses can be stored per-URL based on VARY headers, multiple Cache objects,
etc.  In addition, the HTTP cache doesn’t use the quota management system and
Cache must use the quota system.</p>

<p>IndexedDB, on the other hand, is based on structured cloning which doesn’t
currently support streaming data.  Given that Responses could be quite large
and come in from the network slowly, we thought streaming was a priority to
reduce the amount of required memory.</p>

<p>Also, while not a technical issue, IndexedDB was undergoing a significant
rewrite at the time the Cache work began.  We felt that this would delay the
Cache implementation.</p>

<h1 id="10000-foot-view">10,000-Foot View</h1>
<p>With those primitives in mind, the overall structure of the Cache implementation
looks like this:</p>

<p><img class="center-block" src="/images/cache-high-level-design.png" /></p>

<p>Here we see from left-to-right:</p>

<ul>
  <li>
    <p><strong>JS Script</strong></p>

    <p>Web content running in a JavaScript context on the far left.  This could be
  in a Service Worker, a normal Web Worker, or on the main thread.</p>
  </li>
  <li>
    <p><strong>DOM Object</strong></p>

    <p>The script calls into the C++ DOM object using the <a href="https://developer.mozilla.org/en-US/docs/Mozilla/WebIDL_bindings">WebIDL bindings</a>.
  This layer does some argument validation and conversion, but is mostly just
  a pass through to the other layers.  Since most of the Cache API is
  asynchronous the DOM object also returns a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise</a>.  A unique RequestId
  is passed through to the Cache backend and is later used to find the Promise
  on completion.</p>
  </li>
  <li>
    <p><strong>Child and Parent IPC Actors</strong></p>

    <p>The connection between the processes is represented by a child and a parent
  actor.  These have a one-to-one correlation.  In the Cache API request
  messages are sent from the child-to-parent and response messages are
  sent back from the parent-to-child.  All of these messages are asynchronous
  and non-blocking.</p>
  </li>
  <li>
    <p><strong>Manager</strong></p>

    <p>This is where things start to get a bit more interesting.  The Cache spec
  requires each origin to get its own, unique CacheStorage instance.  This
  is accomplished by creating a separate per-origin Manager object.  These
  Manager objects can come and go as DOM objects are used and then garbage
  collected, but there is only ever one Manager for each origin.</p>
  </li>
  <li>
    <p><strong>Context</strong></p>

    <p>When a Manager has a disk operation to perform it first needs to take a
  number of stateful steps to configure the QuotaManager properly.  All of
  this logic is wrapped up in what is called the Context.  I’ll go into
  more detail on this later, but suffice it to say that the Context handles
  handles setting up the QuotaManager and then scheduling Actions to occur
  at the right time.</p>
  </li>
  <li>
    <p><strong>Action</strong></p>

    <p>An Action is essentially a command object that performs a set of IO
  operations within a Context and then asynchronously calls back to the
  Manager when they are complete.  There are many different Action objects,
  but in general you can think of each Cache method, like <code class="highlighter-rouge">match()</code> or
  <code class="highlighter-rouge">put()</code>, having its own Action.</p>
  </li>
  <li>
    <p><strong>File System</strong></p>

    <p>Finally, the Action objects access the file system through the SQLite
  database, file streams, or the nsIFile interface.</p>
  </li>
</ul>

<h1 id="closer-look">Closer Look</h1>
<p>Lets take a closer look at some of the more interesting parts of the system.
Most of the action takes place in the Manager and Context, so lets start
there.</p>

<h2 id="manager">Manager</h2>
<p>As I mentioned above, the Cache spec indicates each origin should have its own
isolated <code class="highlighter-rouge">caches</code> object.  This maps to a single Manager instance for all
CacheStorage and Cache objects for scripts running in the same origin:</p>

<p><img class="center-block" src="/images/cache-singleton-manager.png" /></p>

<p>Its important that all operations for a single origin are routed through the
same Manager because operations in different script contexts can interact with
one another.</p>

<p>For example, lets consider the following CacheStorage method calls being
executed by scripts running in two separate child processes.</p>

<ol>
  <li>Process 1 calls <code class="highlighter-rouge">caches.open('foo')</code>.</li>
  <li>Process 1’s promise resolves with a Cache object.</li>
  <li>Process 2 calls <code class="highlighter-rouge">caches.delete('foo')</code>.</li>
</ol>

<p>At this point process 1 has a Cache object that has been removed from the
<code class="highlighter-rouge">caches</code> CacheStorage index.  Any additional calls to <code class="highlighter-rouge">caches.open('foo')</code>
will create a new Cache object.</p>

<p>But how should the Cache returned to Process 1 behave?  It’s a bit poorly
defined in the spec, but the current interpretation is that it should behave
normally.  The script in process 1 should continue to be able to access
data in the Cache using <code class="highlighter-rouge">match()</code>.  In addition, it should be able to store
A value using <code class="highlighter-rouge">put()</code>, although this is somewhat pointless if the Cache is
not in <code class="highlighter-rouge">caches</code> anymore.  In the future, a <code class="highlighter-rouge">caches.put()</code> call may be added
to let a Cache object to be re-inserted into the CacheStorage.</p>

<p>In any case, the key here is that the <code class="highlighter-rouge">caches.delete()</code> call in process 2
must understand that a Cache object is in use.  It cannot simply delete all
the data for the Cache.  Instead we must reference count all uses of the
Cache and only remove the data when they are all released.</p>

<p>The Manager is the central place where all of this reference tracking is
implemented and these races are resolved.</p>

<p>A similar issue can happen with <code class="highlighter-rouge">cache.match(req)</code> and <code class="highlighter-rouge">cache.delete(req)</code>.  If
the matched Response is still referenced, then the body data file needs to
remain available for reading.  Again, the Manager handles this by tracking
outstanding references to open body files.  This is actually implemented by using
an additional actor called a StreamControl which will be shown in the
<code class="highlighter-rouge">cache.match()</code> trace below.</p>

<h2 id="context">Context</h2>
<p>There are a number of stateful rules that must be followed in order to use the
QuotaManager.  The Context is designed to implement these rules in a way that
hides the complexity from the rest of the Cache as much as possible.</p>

<p>Roughly the rules are:</p>

<ol>
  <li>First, we must extract various information from the <code class="highlighter-rouge">nsIPrincipal</code> by calling
<code class="highlighter-rouge">QuotaManager::GetInfoFromPrincipal()</code> on the main thread.</li>
  <li>Next, the Cache must call <code class="highlighter-rouge">QuotaManager::WaitForOpenAllowed()</code> on the main
thread.  A callback is provided so that we can be notified when the open is
permitted.  This callback occurs on the main thread.</li>
  <li>Once we receive the callback we must next call
<code class="highlighter-rouge">QuotaManager::EnsureOriginIsInitialized()</code> on the QuotaManager IO thread.
This returns a pointer to the origin-specific directory in which we should
store all our files.</li>
  <li>The Cache code is now free to interact with the file system in the directory
retrieved in the last step.  These file IO operations can take place on any
thread.  There are some small caveats about using QuotaManager specific APIs
for SQLite and file streams, but for the most part these simply require
providing information from the <code class="highlighter-rouge">GetInfoFromPrincipal()</code> call.</li>
  <li>Once all file operations are complete we must call
<code class="highlighter-rouge">QuotaManager::AllowNextSynchronizedOp()</code> on the main thread.  All file streams
and SQLite database connections must be closed before making this call.</li>
</ol>

<p>The Context object functions like a reference counted <a href="http://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization">RAII</a>-style object.  It
automatically executes steps 1 to 3 when constructed.  When the Context object’s
reference count drops to zero, its destructor runs and it schedules the
<code class="highlighter-rouge">AllowNextSynchronzedOp()</code> to run on the main thread.</p>

<p>Note, while it appears the <code class="highlighter-rouge">GetInfoFromPrincipal()</code> call in step 1 could be
performed once and cached, we actually can’t do that.  Part of extracting
the information is querying the current permissions for the principal.  Its
possible these can change over time.</p>

<p>In theory, we could perform the <code class="highlighter-rouge">EnsureOriginIsInitialized()</code> call in step 3 only
once if we also implemented the <code class="highlighter-rouge">nsIOfflineStorage</code> interface.  This interface
would allow the QuotaManager to tell us to shutdown when the origin directory
needs to be deleted.</p>

<p>Currently the Cache does not do this, however, because the <code class="highlighter-rouge">nsIOfflineStorage</code>
interface is expected to change significantly in the near future.  Instead, Cache
simply calls the <code class="highlighter-rouge">EnsureOriginIsInitialized()</code> method each time to re-create the
directory if necessary.  Once the API stabilizes the Cache will be updated to
receive all such notifications from QuotaManager.</p>

<p>An additional consequence of not getting the <code class="highlighter-rouge">nsIOfflineStorage</code> callbacks is
that the Cache must proactively call <code class="highlighter-rouge">QuotaManager::AllowNextSynchronizedOp()</code>
so that the next QuotaManager client for the origin can do work.</p>

<p>Given the <a href="http://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization">RAII</a>-style life cycle, this is easily achieved by simply having the
Action objects hold a reference to the Context until they complete.  The
Manager has a raw pointer to the Context that is cleared when it destructs.  If
there is no more work to be done, the Context is released and step 5 is
performed.</p>

<p>Once the new <code class="highlighter-rouge">nsIOfflineStorage</code> API callbacks are implemented the Cache will
be able to keep the Context open longer.  Again, this is relatively easy and
simply needs the Manager to hold a strong reference to the Context.</p>

<h2 id="streams-and-ipc">Streams and IPC</h2>
<p>Since mobile platforms are a key target for Service Workers, the Cache API needs
to be memory efficient.  RAM is often the most constraining resource on these
devices.  To that end, our implementation should use streaming whenever possible
to avoid holding large buffers in memory.</p>

<p>In gecko this is essentially implemented by a collection of classes that
implement the <code class="highlighter-rouge">nsIInputStream</code> interface.  These streams are pretty
straightforward to use in normal code, but what happens when we need to serialize
a stream across IPC?</p>

<p>The answer depends on the type of stream being serialized.  We have a couple
existing solutions:</p>

<ul>
  <li>Streams created for a flat memory buffer are simply copied across.</li>
  <li>Streams backed by a file have their file descriptor <code class="highlighter-rouge">dup()</code>‘d and passed
across.  This allows the other process to read the file directly without any
immediate memory impact.</li>
</ul>

<p>Unfortunately, we do not have a way to serialize an <code class="highlighter-rouge">nsIPipe</code> across IPC without
completely buffering it first.  This is important for Cache, because this is the
type of stream we receive from a <code class="highlighter-rouge">fetch()</code> Response object.</p>

<p>To solve this, Kyle Huey is implementing a new <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1093357">CrossProcessPipe</a> that will send
the data across the IPC boundary in chunks.</p>

<p>In this particular case we will be sending all the fetched
Response data from the parent-to-child when the <code class="highlighter-rouge">fetch()</code> is performed.  If the
Response is passed to <code class="highlighter-rouge">Cache.put()</code>, then the data is copied back to the parent.</p>

<p>You may be asking, “why do you need to send the <code class="highlighter-rouge">fetch()</code> data from the child to
the parent process when doing a <code class="highlighter-rouge">cache.put()</code>?  Surely the parent process
already has this data somewhere.”</p>

<p>Unfortunately, this is necessary to avoid buffering potentially large Response
bodies in the parent.  It’s imperative that the parent process never runs out of
memory.  One day we may be able to open the file descriptor in the parent,
<code class="highlighter-rouge">dup()</code> it to the child, and then write the data directly from the child process,
but currently this is not possible with the current Quota Manager.</p>

<h2 id="disk-schema">Disk Schema</h2>
<p>Finally, that brings us to a discussion of how the data is actually stored on
disk.  It basically breaks down like this:</p>

<ul>
  <li>Body data for both Requests and Responses are stored directly in individual
<a href="https://code.google.com/p/snappy/">snappy</a> compressed files.</li>
  <li>All other Request and Response data are stored in SQLite.</li>
</ul>

<p>I know some people <a href="https://wiki.mozilla.org/Performance/Avoid_SQLite_In_Your_Next_Firefox_Feature">discourage using SQLite</a>, but I chose it for a few
reasons:</p>

<ol>
  <li>SQLite provides transactional behavior.</li>
  <li>SQLite is a well-tested system with known caveats and performance
characteristics.</li>
  <li>SQL provides a flexible query engine to implement and fine tune the Cache
matching algorithm.</li>
</ol>

<p>In this case I don’t think serializing all of the Cache metadata into a flat
file, as suggested by that wiki page, would be a good solution here.  In general,
only a small subset of the data will be read or write on each operation.  In
addition, we don’t want to require reading the entire dataset into memory.
Also, for expected Cache usage, the data should typically be read-mostly with
fewer writes over time.  Data will not be continuously appended to the database.
For these reasons I’ve chosen to go with SQLite while understanding the risks
and pitfalls.</p>

<p>I plan to mitigate fragmentation by performing regular maintenance.  Whenever
a row is deleted from or inserted into a table a counter will be updated in a
flat file.  When the Context opens it will examine this counter and perform a
VACUUM if it’s larger than a configured constant.  The constant will of course
have to be fine-tuned based on real world measurements.</p>

<p>Simple marker files will also be used to note when a Context is open.  If the
browser is killed with a Context open, then a scrubbing process will be
triggered the next time that origin accesses <code class="highlighter-rouge">caches</code>.  This will look for
orphaned Cache and body data files.</p>

<p>Finally, the bulk of the SQLite specific code is isolated in two classes;
<code class="highlighter-rouge">DBAction.cpp</code> and <code class="highlighter-rouge">DBSchema.cpp</code>.  If we find SQLite is not performant
enough, it should be straightforward to replace these files with another
solution.</p>

<h1 id="detailed-trace">Detailed Trace</h1>
<p>Now that we have the lay of the land, lets trace what happens in the Cache when
you do something like this:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// photo by leg0fenris: https://www.flickr.com/photos/legofenris/
var troopers = 'blob:https://mdn.github.io/6d4a4e7e-0b37-c342-81b6-c031a4b9082c'

var legoBox;
Promise.all([
  fetch(troopers),
  caches.open('legos')
]).then(function(results) {
  var response = results[0];
  legoBox = results[1];
  return legoBox.put(troopers, response);
}).then(function() {
  return legoBox.match(troopers);
}).then(function(response) {
  // invade rebel base
});
</code></pre></div></div>

<p>While it might seem the first Cache operation is <code class="highlighter-rouge">caches.open()</code>, we actually
need to trace what happens when <code class="highlighter-rouge">caches</code> is touched.  When the <code class="highlighter-rouge">caches</code>
attribute is first accessed on the global we create the CacheStorage DOM object
and IPC actors.</p>

<p><img class="center-block" src="/images/cache-create-actor.png" /></p>

<p>I’ve numbered each step in order to show the sequence of events.  These steps
are roughly:</p>

<ol>
  <li>The global WebIDL binding for <code class="highlighter-rouge">caches</code> creates a new CacheStorage object
and returns it immediately to the script.</li>
  <li>Asynchronously, the CacheStorage object creates a new child IPC actor.  Since
this may not complete immediately, any requests coming in will be queued
until actor is ready.  Of course, since all the operations use Promises, this
queuing is transparent to the content script.</li>
  <li>The child actor in turn sends a message to the parent process to create a
corresponding parent actor.  This message includes the nsIPrincipal
describing the content script’s origin and other identifying information.</li>
  <li>Before permitting any actual work to take place, the principal provided to
the actor must be verified.  For various reasons this can only be done on
the main thread.  So an asynchronous operation is triggered to examine
the principal and any CacheStorage operations coming in are queued.</li>
  <li>Once the principal is verified we return to the PBackground worker thread.</li>
  <li>Assuming verification succeeded, then the origin’s Manager can now be
accessed or created.  (This is actually deferred until the first operation,
though.)  Any pending CacheStorage operations are immediately executed.</li>
</ol>

<p>Now that we have the <code class="highlighter-rouge">caches</code> object we can get on with the <code class="highlighter-rouge">open()</code>.  This
sequence of steps is more complex:</p>

<p><img class="center-block" src="/images/cache-open-sequence.png" /></p>

<p>There are a lot more steps here.  To avoid making this blog post any more
boring than necessary, I’ll focus on just the interesting ones.</p>

<p>As with the creation trace above, <strong>steps 1 to 4</strong> are basically just passing
the <code class="highlighter-rouge">open()</code> arguments across to the Manager.  Your basic digital plumbing at
work.</p>

<p><strong>Steps 5 and 6</strong> make sure the Context exists and schedules an Action to
run on the IO thread.</p>

<p>Next, in <strong>step 7</strong>, the Action will perform the actual work involved.  It
must find the Cache if it already exists or create a new Cache.  This basically
involves reading and writing an entry in the SQLite database.  The result is
a unique CacheId.</p>

<p><strong>Steps 8 to 11</strong> essentially just return the CacheId back to the actor layer.</p>

<p>If this was the last Action, then the Context is released in <strong>step 10</strong>.</p>

<p>At this point we need to create a new parent actor for the CacheId.  This Cache
actor will be passed back to the child process where it gets a child actor.
Finally a Cache DOM object is constructed and used to resolve the Promise
returned to the JS script in first step.  All of this occurs in <strong>steps 12 to
17</strong>.</p>

<p>On the off chance you’re still reading this section, the script next performs
a <code class="highlighter-rouge">put()</code> on the cache:</p>

<p><img class="center-block" src="/images/cache-put-sequence.png" /></p>

<p>This trace looks similar to the last one, with the main difference occurring in the
Action on the right.  While this is true, its important to note that the
IPC serialization in this case includes a data stream for the Response body.
So we might be creating a CrossProcessPipe actor to copy data across in chunks.</p>

<p>With that in mind the Action needs to do the following:</p>

<ul>
  <li>Stream body data to files on disk.  This happens asynchronously on the IO
thread.  The Action and the Context are kept alive this entire time.</li>
  <li>Update the SQLite database to reflect the new Request/Response pair with
a file name pointer to the body.</li>
</ul>

<p>All of the steps back to the child process are essentially just there to indicate
completion.  The <code class="highlighter-rouge">put()</code> operation resolves undefined in the success case.</p>

<p>Finally the script can use <code class="highlighter-rouge">match()</code> to read the data back out of the Cache:</p>

<p><img class="center-block" src="/images/cache-match-sequence.png" /></p>

<p>In this trace the Action must first query the SQLite tables to determine if
the Request exists in the Cache.  If it does, then it opens a stream to the
body file.</p>

<p>Its important to note, again, that this is just opening a stream.  The Action
is only accessing the file system directory structure and opening a file
descriptor to the body.  Its not actually reading any of the data for the
body yet.</p>

<p>Once the matched Response data and body file stream are passed back to the
parent actor, we must create an extra actor for the stream.  This actor is
then passed back to the child process and used to create a ReadStream.</p>

<p>A ReadStream is a wrapper around the body file stream.  This wrapper will
send a message back to the parent whenever the stream is closed.  In addition,
it allows the Manager to signal the stream that a shutdown is occurring and
the stream should be immediately closed.</p>

<p>This extra call back to the parent process on close is necessary to allow
the Manager to reference track open streams and hold the Context open until
all the streams are closed.</p>

<p>The body file stream itself is serialized back to the child process by
dup()’in the file descriptor opened by the Action.</p>

<p>Ultimately the body file data is read from the stream when the content script
calls <code class="highlighter-rouge">Response.text()</code> or one of the other body consumption methods.</p>

<h1 id="todo">TODO</h1>
<p>Of course, there is still a lot to do.  While we are going to try to land the
current implementation on mozilla-central, a number of issues will need to
be resolved in the near future.</p>

<ol>
  <li>SQLite maintenance must be implemented.  As I mentioned above, I have a
plan for how this will work, but it has not been written yet.</li>
  <li>Stress testing must be performed to fine tune the SQLite schema and
configuration.</li>
  <li>Files should be de-duplicated within a single origin’s CacheStorage.  This
will be important for efficiently supporting some expected uses of the
Cache API.  (De-duplication beyond the same origin will require expanded
support from the QuotaManager and is unlikely to occur in the near future.)</li>
  <li>Request and Response <code class="highlighter-rouge">clone()</code> must be improved.  Currently a <code class="highlighter-rouge">clone()</code>
call results in the body data being copied.  In general we should be able
to avoid almost all copying here, but it will require some work.  See
<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1100398">bug 1100398</a> for more details.</li>
  <li>Telemetry should be added so that we can understand how the Cache is
being used.  This will be important for improving the performance of the
Cache over time.</li>
</ol>

<h1 id="conclusion">Conclusion</h1>
<p>While the Cache implementation is sure to change, this is where we are today.
We want to get Cache and the other Service Worker bits off of our project branch
and into mozilla-central as soon as possible so other people can start testing
with them.  Reviewing the Cache implementation is an important step in that
process.</p>

<p>If you would like to follow along please see <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=940273">bug 940273</a>.  As always, feedback
is welcome by email or on <a href="https://twitter.com/wanderview">twitter</a>.</p>

]]></content>
  </entry>
  
  
</feed>
